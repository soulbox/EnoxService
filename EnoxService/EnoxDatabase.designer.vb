'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.36245
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="DataCollector")>  _
Partial Public Class EnoxDatabaseDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertDataPointSet(instance As DataPointSet)
    End Sub
  Partial Private Sub UpdateDataPointSet(instance As DataPointSet)
    End Sub
  Partial Private Sub DeleteDataPointSet(instance As DataPointSet)
    End Sub
  Partial Private Sub InsertDataValueSet(instance As DataValueSet)
    End Sub
  Partial Private Sub UpdateDataValueSet(instance As DataValueSet)
    End Sub
  Partial Private Sub DeleteDataValueSet(instance As DataValueSet)
    End Sub
  Partial Private Sub InsertDeviceSet(instance As DeviceSet)
    End Sub
  Partial Private Sub UpdateDeviceSet(instance As DeviceSet)
    End Sub
  Partial Private Sub DeleteDeviceSet(instance As DeviceSet)
    End Sub
  Partial Private Sub InsertRapor(instance As Rapor)
    End Sub
  Partial Private Sub UpdateRapor(instance As Rapor)
    End Sub
  Partial Private Sub DeleteRapor(instance As Rapor)
    End Sub
  Partial Private Sub InsertHeatSet(instance As HeatSet)
    End Sub
  Partial Private Sub UpdateHeatSet(instance As HeatSet)
    End Sub
  Partial Private Sub DeleteHeatSet(instance As HeatSet)
    End Sub
  Partial Private Sub InsertHumiditySet(instance As HumiditySet)
    End Sub
  Partial Private Sub UpdateHumiditySet(instance As HumiditySet)
    End Sub
  Partial Private Sub DeleteHumiditySet(instance As HumiditySet)
    End Sub
  Partial Private Sub InsertPressureSet(instance As PressureSet)
    End Sub
  Partial Private Sub UpdatePressureSet(instance As PressureSet)
    End Sub
  Partial Private Sub DeletePressureSet(instance As PressureSet)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.EnoxService.My.MySettings.Default.DataCollectorConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property DataPointSets() As System.Data.Linq.Table(Of DataPointSet)
		Get
			Return Me.GetTable(Of DataPointSet)
		End Get
	End Property
	
	Public ReadOnly Property DataValueSets() As System.Data.Linq.Table(Of DataValueSet)
		Get
			Return Me.GetTable(Of DataValueSet)
		End Get
	End Property
	
	Public ReadOnly Property DeviceSets() As System.Data.Linq.Table(Of DeviceSet)
		Get
			Return Me.GetTable(Of DeviceSet)
		End Get
	End Property
	
	Public ReadOnly Property Rapors() As System.Data.Linq.Table(Of Rapor)
		Get
			Return Me.GetTable(Of Rapor)
		End Get
	End Property
	
	Public ReadOnly Property HeatSets() As System.Data.Linq.Table(Of HeatSet)
		Get
			Return Me.GetTable(Of HeatSet)
		End Get
	End Property
	
	Public ReadOnly Property HumiditySets() As System.Data.Linq.Table(Of HumiditySet)
		Get
			Return Me.GetTable(Of HumiditySet)
		End Get
	End Property
	
	Public ReadOnly Property PressureSets() As System.Data.Linq.Table(Of PressureSet)
		Get
			Return Me.GetTable(Of PressureSet)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DataPointSet")>  _
Partial Public Class DataPointSet
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Short
	
	Private _Address As String
	
	Private _DeviceId As Integer
	
	Private _Unit As Byte
	
	Private _Label As String
	
	Private _LastReadId As Long
	
	Private _CurrentValue As Decimal
	
	Private _MinValue As Decimal
	
	Private _MaxValue As Decimal
	
	Private _DataValueSets As EntitySet(Of DataValueSet)
	
	Private _HumiditySets As EntitySet(Of HumiditySet)
	
	Private _DeviceSet As EntityRef(Of DeviceSet)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Short)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnDeviceIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnDeviceIdChanged()
    End Sub
    Partial Private Sub OnUnitChanging(value As Byte)
    End Sub
    Partial Private Sub OnUnitChanged()
    End Sub
    Partial Private Sub OnLabelChanging(value As String)
    End Sub
    Partial Private Sub OnLabelChanged()
    End Sub
    Partial Private Sub OnLastReadIdChanging(value As Long)
    End Sub
    Partial Private Sub OnLastReadIdChanged()
    End Sub
    Partial Private Sub OnCurrentValueChanging(value As Decimal)
    End Sub
    Partial Private Sub OnCurrentValueChanged()
    End Sub
    Partial Private Sub OnMinValueChanging(value As Decimal)
    End Sub
    Partial Private Sub OnMinValueChanged()
    End Sub
    Partial Private Sub OnMaxValueChanging(value As Decimal)
    End Sub
    Partial Private Sub OnMaxValueChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DataValueSets = New EntitySet(Of DataValueSet)(AddressOf Me.attach_DataValueSets, AddressOf Me.detach_DataValueSets)
		Me._HumiditySets = New EntitySet(Of HumiditySet)(AddressOf Me.attach_HumiditySets, AddressOf Me.detach_HumiditySets)
		Me._DeviceSet = CType(Nothing, EntityRef(Of DeviceSet))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="SmallInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Short
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceId", DbType:="Int NOT NULL")>  _
	Public Property DeviceId() As Integer
		Get
			Return Me._DeviceId
		End Get
		Set
			If ((Me._DeviceId = value)  _
						= false) Then
				If Me._DeviceSet.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDeviceIdChanging(value)
				Me.SendPropertyChanging
				Me._DeviceId = value
				Me.SendPropertyChanged("DeviceId")
				Me.OnDeviceIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Unit", DbType:="TinyInt NOT NULL")>  _
	Public Property Unit() As Byte
		Get
			Return Me._Unit
		End Get
		Set
			If ((Me._Unit = value)  _
						= false) Then
				Me.OnUnitChanging(value)
				Me.SendPropertyChanging
				Me._Unit = value
				Me.SendPropertyChanged("Unit")
				Me.OnUnitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Label", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Label() As String
		Get
			Return Me._Label
		End Get
		Set
			If (String.Equals(Me._Label, value) = false) Then
				Me.OnLabelChanging(value)
				Me.SendPropertyChanging
				Me._Label = value
				Me.SendPropertyChanged("Label")
				Me.OnLabelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastReadId", DbType:="BigInt NOT NULL")>  _
	Public Property LastReadId() As Long
		Get
			Return Me._LastReadId
		End Get
		Set
			If ((Me._LastReadId = value)  _
						= false) Then
				Me.OnLastReadIdChanging(value)
				Me.SendPropertyChanging
				Me._LastReadId = value
				Me.SendPropertyChanged("LastReadId")
				Me.OnLastReadIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrentValue", DbType:="Decimal(18,0) NOT NULL")>  _
	Public Property CurrentValue() As Decimal
		Get
			Return Me._CurrentValue
		End Get
		Set
			If ((Me._CurrentValue = value)  _
						= false) Then
				Me.OnCurrentValueChanging(value)
				Me.SendPropertyChanging
				Me._CurrentValue = value
				Me.SendPropertyChanged("CurrentValue")
				Me.OnCurrentValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MinValue", DbType:="Decimal(18,0) NOT NULL")>  _
	Public Property MinValue() As Decimal
		Get
			Return Me._MinValue
		End Get
		Set
			If ((Me._MinValue = value)  _
						= false) Then
				Me.OnMinValueChanging(value)
				Me.SendPropertyChanging
				Me._MinValue = value
				Me.SendPropertyChanged("MinValue")
				Me.OnMinValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaxValue", DbType:="Decimal(18,0) NOT NULL")>  _
	Public Property MaxValue() As Decimal
		Get
			Return Me._MaxValue
		End Get
		Set
			If ((Me._MaxValue = value)  _
						= false) Then
				Me.OnMaxValueChanging(value)
				Me.SendPropertyChanging
				Me._MaxValue = value
				Me.SendPropertyChanged("MaxValue")
				Me.OnMaxValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DataPointSet_DataValueSet", Storage:="_DataValueSets", ThisKey:="Id", OtherKey:="DataPointId")>  _
	Public Property DataValueSets() As EntitySet(Of DataValueSet)
		Get
			Return Me._DataValueSets
		End Get
		Set
			Me._DataValueSets.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DataPointSet_HumiditySet", Storage:="_HumiditySets", ThisKey:="Id", OtherKey:="DatapointId")>  _
	Public Property HumiditySets() As EntitySet(Of HumiditySet)
		Get
			Return Me._HumiditySets
		End Get
		Set
			Me._HumiditySets.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DeviceSet_DataPointSet", Storage:="_DeviceSet", ThisKey:="DeviceId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property DeviceSet() As DeviceSet
		Get
			Return Me._DeviceSet.Entity
		End Get
		Set
			Dim previousValue As DeviceSet = Me._DeviceSet.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DeviceSet.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DeviceSet.Entity = Nothing
					previousValue.DataPointSets.Remove(Me)
				End If
				Me._DeviceSet.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DataPointSets.Add(Me)
					Me._DeviceId = value.Id
				Else
					Me._DeviceId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DeviceSet")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DataValueSets(ByVal entity As DataValueSet)
		Me.SendPropertyChanging
		entity.DataPointSet = Me
	End Sub
	
	Private Sub detach_DataValueSets(ByVal entity As DataValueSet)
		Me.SendPropertyChanging
		entity.DataPointSet = Nothing
	End Sub
	
	Private Sub attach_HumiditySets(ByVal entity As HumiditySet)
		Me.SendPropertyChanging
		entity.DataPointSet = Me
	End Sub
	
	Private Sub detach_HumiditySets(ByVal entity As HumiditySet)
		Me.SendPropertyChanging
		entity.DataPointSet = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DataValueSet")>  _
Partial Public Class DataValueSet
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _ValueDate As Date
	
	Private _Value As Decimal
	
	Private _DataPointId As Short
	
	Private _DataPointSet As EntityRef(Of DataPointSet)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnValueDateChanging(value As Date)
    End Sub
    Partial Private Sub OnValueDateChanged()
    End Sub
    Partial Private Sub OnValueChanging(value As Decimal)
    End Sub
    Partial Private Sub OnValueChanged()
    End Sub
    Partial Private Sub OnDataPointIdChanging(value As Short)
    End Sub
    Partial Private Sub OnDataPointIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DataPointSet = CType(Nothing, EntityRef(Of DataPointSet))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ValueDate", DbType:="DateTime NOT NULL")>  _
	Public Property ValueDate() As Date
		Get
			Return Me._ValueDate
		End Get
		Set
			If ((Me._ValueDate = value)  _
						= false) Then
				Me.OnValueDateChanging(value)
				Me.SendPropertyChanging
				Me._ValueDate = value
				Me.SendPropertyChanged("ValueDate")
				Me.OnValueDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="Decimal(18,0) NOT NULL")>  _
	Public Property Value() As Decimal
		Get
			Return Me._Value
		End Get
		Set
			If ((Me._Value = value)  _
						= false) Then
				Me.OnValueChanging(value)
				Me.SendPropertyChanging
				Me._Value = value
				Me.SendPropertyChanged("Value")
				Me.OnValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataPointId", DbType:="SmallInt NOT NULL")>  _
	Public Property DataPointId() As Short
		Get
			Return Me._DataPointId
		End Get
		Set
			If ((Me._DataPointId = value)  _
						= false) Then
				If Me._DataPointSet.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDataPointIdChanging(value)
				Me.SendPropertyChanging
				Me._DataPointId = value
				Me.SendPropertyChanged("DataPointId")
				Me.OnDataPointIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DataPointSet_DataValueSet", Storage:="_DataPointSet", ThisKey:="DataPointId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property DataPointSet() As DataPointSet
		Get
			Return Me._DataPointSet.Entity
		End Get
		Set
			Dim previousValue As DataPointSet = Me._DataPointSet.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DataPointSet.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DataPointSet.Entity = Nothing
					previousValue.DataValueSets.Remove(Me)
				End If
				Me._DataPointSet.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DataValueSets.Add(Me)
					Me._DataPointId = value.Id
				Else
					Me._DataPointId = CType(Nothing, Short)
				End If
				Me.SendPropertyChanged("DataPointSet")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DeviceSet")>  _
Partial Public Class DeviceSet
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _Description As String
	
	Private _Host As String
	
	Private _Port As Integer
	
	Private _Interval As Integer
	
	Private _StartTime As System.TimeSpan
	
	Private _EndTime As System.TimeSpan
	
	Private _DataPointSets As EntitySet(Of DataPointSet)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnHostChanging(value As String)
    End Sub
    Partial Private Sub OnHostChanged()
    End Sub
    Partial Private Sub OnPortChanging(value As Integer)
    End Sub
    Partial Private Sub OnPortChanged()
    End Sub
    Partial Private Sub OnIntervalChanging(value As Integer)
    End Sub
    Partial Private Sub OnIntervalChanged()
    End Sub
    Partial Private Sub OnStartTimeChanging(value As System.TimeSpan)
    End Sub
    Partial Private Sub OnStartTimeChanged()
    End Sub
    Partial Private Sub OnEndTimeChanging(value As System.TimeSpan)
    End Sub
    Partial Private Sub OnEndTimeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DataPointSets = New EntitySet(Of DataPointSet)(AddressOf Me.attach_DataPointSets, AddressOf Me.detach_DataPointSets)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Host", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Host() As String
		Get
			Return Me._Host
		End Get
		Set
			If (String.Equals(Me._Host, value) = false) Then
				Me.OnHostChanging(value)
				Me.SendPropertyChanging
				Me._Host = value
				Me.SendPropertyChanged("Host")
				Me.OnHostChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Port", DbType:="Int NOT NULL")>  _
	Public Property Port() As Integer
		Get
			Return Me._Port
		End Get
		Set
			If ((Me._Port = value)  _
						= false) Then
				Me.OnPortChanging(value)
				Me.SendPropertyChanging
				Me._Port = value
				Me.SendPropertyChanged("Port")
				Me.OnPortChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Interval", DbType:="Int NOT NULL")>  _
	Public Property Interval() As Integer
		Get
			Return Me._Interval
		End Get
		Set
			If ((Me._Interval = value)  _
						= false) Then
				Me.OnIntervalChanging(value)
				Me.SendPropertyChanging
				Me._Interval = value
				Me.SendPropertyChanged("Interval")
				Me.OnIntervalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartTime", DbType:="Time NOT NULL")>  _
	Public Property StartTime() As System.TimeSpan
		Get
			Return Me._StartTime
		End Get
		Set
			If ((Me._StartTime = value)  _
						= false) Then
				Me.OnStartTimeChanging(value)
				Me.SendPropertyChanging
				Me._StartTime = value
				Me.SendPropertyChanged("StartTime")
				Me.OnStartTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndTime", DbType:="Time NOT NULL")>  _
	Public Property EndTime() As System.TimeSpan
		Get
			Return Me._EndTime
		End Get
		Set
			If ((Me._EndTime = value)  _
						= false) Then
				Me.OnEndTimeChanging(value)
				Me.SendPropertyChanging
				Me._EndTime = value
				Me.SendPropertyChanged("EndTime")
				Me.OnEndTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DeviceSet_DataPointSet", Storage:="_DataPointSets", ThisKey:="Id", OtherKey:="DeviceId")>  _
	Public Property DataPointSets() As EntitySet(Of DataPointSet)
		Get
			Return Me._DataPointSets
		End Get
		Set
			Me._DataPointSets.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DataPointSets(ByVal entity As DataPointSet)
		Me.SendPropertyChanging
		entity.DeviceSet = Me
	End Sub
	
	Private Sub detach_DataPointSets(ByVal entity As DataPointSet)
		Me.SendPropertyChanging
		entity.DeviceSet = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Rapor")>  _
Partial Public Class Rapor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Tarih As System.Nullable(Of Date)
	
	Private _OdaAdı As String
	
	Private _Isı As System.Nullable(Of Integer)
	
	Private _Nem As System.Nullable(Of Integer)
	
	Private _Basınç As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnTarihChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnTarihChanged()
    End Sub
    Partial Private Sub OnOdaAdıChanging(value As String)
    End Sub
    Partial Private Sub OnOdaAdıChanged()
    End Sub
    Partial Private Sub OnIsıChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIsıChanged()
    End Sub
    Partial Private Sub OnNemChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNemChanged()
    End Sub
    Partial Private Sub OnBasınçChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBasınçChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tarih", DbType:="DateTime")>  _
	Public Property Tarih() As System.Nullable(Of Date)
		Get
			Return Me._Tarih
		End Get
		Set
			If (Me._Tarih.Equals(value) = false) Then
				Me.OnTarihChanging(value)
				Me.SendPropertyChanging
				Me._Tarih = value
				Me.SendPropertyChanged("Tarih")
				Me.OnTarihChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OdaAdı", DbType:="NVarChar(MAX)")>  _
	Public Property OdaAdı() As String
		Get
			Return Me._OdaAdı
		End Get
		Set
			If (String.Equals(Me._OdaAdı, value) = false) Then
				Me.OnOdaAdıChanging(value)
				Me.SendPropertyChanging
				Me._OdaAdı = value
				Me.SendPropertyChanged("OdaAdı")
				Me.OnOdaAdıChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Isı", DbType:="Int")>  _
	Public Property Isı() As System.Nullable(Of Integer)
		Get
			Return Me._Isı
		End Get
		Set
			If (Me._Isı.Equals(value) = false) Then
				Me.OnIsıChanging(value)
				Me.SendPropertyChanging
				Me._Isı = value
				Me.SendPropertyChanged("Isı")
				Me.OnIsıChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nem", DbType:="Int")>  _
	Public Property Nem() As System.Nullable(Of Integer)
		Get
			Return Me._Nem
		End Get
		Set
			If (Me._Nem.Equals(value) = false) Then
				Me.OnNemChanging(value)
				Me.SendPropertyChanging
				Me._Nem = value
				Me.SendPropertyChanged("Nem")
				Me.OnNemChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Basınç", DbType:="Int")>  _
	Public Property Basınç() As System.Nullable(Of Integer)
		Get
			Return Me._Basınç
		End Get
		Set
			If (Me._Basınç.Equals(value) = false) Then
				Me.OnBasınçChanging(value)
				Me.SendPropertyChanging
				Me._Basınç = value
				Me.SendPropertyChanged("Basınç")
				Me.OnBasınçChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.HeatSet")>  _
Partial Public Class HeatSet
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Adres As Integer
	
	Private _OdaNo As String
	
	Private _Value As Integer
	
	Private _CheckValue As Integer
	
	Private _DatapointId As Short
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnAdresChanging(value As Integer)
    End Sub
    Partial Private Sub OnAdresChanged()
    End Sub
    Partial Private Sub OnOdaNoChanging(value As String)
    End Sub
    Partial Private Sub OnOdaNoChanged()
    End Sub
    Partial Private Sub OnValueChanging(value As Integer)
    End Sub
    Partial Private Sub OnValueChanged()
    End Sub
    Partial Private Sub OnCheckValueChanging(value As Integer)
    End Sub
    Partial Private Sub OnCheckValueChanged()
    End Sub
    Partial Private Sub OnDatapointIdChanging(value As Short)
    End Sub
    Partial Private Sub OnDatapointIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Adres", DbType:="Int NOT NULL")>  _
	Public Property Adres() As Integer
		Get
			Return Me._Adres
		End Get
		Set
			If ((Me._Adres = value)  _
						= false) Then
				Me.OnAdresChanging(value)
				Me.SendPropertyChanging
				Me._Adres = value
				Me.SendPropertyChanged("Adres")
				Me.OnAdresChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OdaNo", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property OdaNo() As String
		Get
			Return Me._OdaNo
		End Get
		Set
			If (String.Equals(Me._OdaNo, value) = false) Then
				Me.OnOdaNoChanging(value)
				Me.SendPropertyChanging
				Me._OdaNo = value
				Me.SendPropertyChanged("OdaNo")
				Me.OnOdaNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="Int NOT NULL")>  _
	Public Property Value() As Integer
		Get
			Return Me._Value
		End Get
		Set
			If ((Me._Value = value)  _
						= false) Then
				Me.OnValueChanging(value)
				Me.SendPropertyChanging
				Me._Value = value
				Me.SendPropertyChanged("Value")
				Me.OnValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CheckValue", DbType:="Int NOT NULL")>  _
	Public Property CheckValue() As Integer
		Get
			Return Me._CheckValue
		End Get
		Set
			If ((Me._CheckValue = value)  _
						= false) Then
				Me.OnCheckValueChanging(value)
				Me.SendPropertyChanging
				Me._CheckValue = value
				Me.SendPropertyChanged("CheckValue")
				Me.OnCheckValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DatapointId", DbType:="SmallInt NOT NULL")>  _
	Public Property DatapointId() As Short
		Get
			Return Me._DatapointId
		End Get
		Set
			If ((Me._DatapointId = value)  _
						= false) Then
				Me.OnDatapointIdChanging(value)
				Me.SendPropertyChanging
				Me._DatapointId = value
				Me.SendPropertyChanged("DatapointId")
				Me.OnDatapointIdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.HumiditySet")>  _
Partial Public Class HumiditySet
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Adres As Integer
	
	Private _OdaNo As String
	
	Private _Value As Integer
	
	Private _CheckValue As Integer
	
	Private _DatapointId As Short
	
	Private _DataPointSet As EntityRef(Of DataPointSet)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnAdresChanging(value As Integer)
    End Sub
    Partial Private Sub OnAdresChanged()
    End Sub
    Partial Private Sub OnOdaNoChanging(value As String)
    End Sub
    Partial Private Sub OnOdaNoChanged()
    End Sub
    Partial Private Sub OnValueChanging(value As Integer)
    End Sub
    Partial Private Sub OnValueChanged()
    End Sub
    Partial Private Sub OnCheckValueChanging(value As Integer)
    End Sub
    Partial Private Sub OnCheckValueChanged()
    End Sub
    Partial Private Sub OnDatapointIdChanging(value As Short)
    End Sub
    Partial Private Sub OnDatapointIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DataPointSet = CType(Nothing, EntityRef(Of DataPointSet))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Adres", DbType:="Int NOT NULL")>  _
	Public Property Adres() As Integer
		Get
			Return Me._Adres
		End Get
		Set
			If ((Me._Adres = value)  _
						= false) Then
				Me.OnAdresChanging(value)
				Me.SendPropertyChanging
				Me._Adres = value
				Me.SendPropertyChanged("Adres")
				Me.OnAdresChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OdaNo", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property OdaNo() As String
		Get
			Return Me._OdaNo
		End Get
		Set
			If (String.Equals(Me._OdaNo, value) = false) Then
				Me.OnOdaNoChanging(value)
				Me.SendPropertyChanging
				Me._OdaNo = value
				Me.SendPropertyChanged("OdaNo")
				Me.OnOdaNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="Int NOT NULL")>  _
	Public Property Value() As Integer
		Get
			Return Me._Value
		End Get
		Set
			If ((Me._Value = value)  _
						= false) Then
				Me.OnValueChanging(value)
				Me.SendPropertyChanging
				Me._Value = value
				Me.SendPropertyChanged("Value")
				Me.OnValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CheckValue", DbType:="Int NOT NULL")>  _
	Public Property CheckValue() As Integer
		Get
			Return Me._CheckValue
		End Get
		Set
			If ((Me._CheckValue = value)  _
						= false) Then
				Me.OnCheckValueChanging(value)
				Me.SendPropertyChanging
				Me._CheckValue = value
				Me.SendPropertyChanged("CheckValue")
				Me.OnCheckValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DatapointId", DbType:="SmallInt NOT NULL")>  _
	Public Property DatapointId() As Short
		Get
			Return Me._DatapointId
		End Get
		Set
			If ((Me._DatapointId = value)  _
						= false) Then
				If Me._DataPointSet.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDatapointIdChanging(value)
				Me.SendPropertyChanging
				Me._DatapointId = value
				Me.SendPropertyChanged("DatapointId")
				Me.OnDatapointIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DataPointSet_HumiditySet", Storage:="_DataPointSet", ThisKey:="DatapointId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property DataPointSet() As DataPointSet
		Get
			Return Me._DataPointSet.Entity
		End Get
		Set
			Dim previousValue As DataPointSet = Me._DataPointSet.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DataPointSet.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DataPointSet.Entity = Nothing
					previousValue.HumiditySets.Remove(Me)
				End If
				Me._DataPointSet.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HumiditySets.Add(Me)
					Me._DatapointId = value.Id
				Else
					Me._DatapointId = CType(Nothing, Short)
				End If
				Me.SendPropertyChanged("DataPointSet")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PressureSet")>  _
Partial Public Class PressureSet
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Adres As Integer
	
	Private _OdaNo As String
	
	Private _Value As Integer
	
	Private _CheckValue As Integer
	
	Private _DatapointId As Short
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnAdresChanging(value As Integer)
    End Sub
    Partial Private Sub OnAdresChanged()
    End Sub
    Partial Private Sub OnOdaNoChanging(value As String)
    End Sub
    Partial Private Sub OnOdaNoChanged()
    End Sub
    Partial Private Sub OnValueChanging(value As Integer)
    End Sub
    Partial Private Sub OnValueChanged()
    End Sub
    Partial Private Sub OnCheckValueChanging(value As Integer)
    End Sub
    Partial Private Sub OnCheckValueChanged()
    End Sub
    Partial Private Sub OnDatapointIdChanging(value As Short)
    End Sub
    Partial Private Sub OnDatapointIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Adres", DbType:="Int NOT NULL")>  _
	Public Property Adres() As Integer
		Get
			Return Me._Adres
		End Get
		Set
			If ((Me._Adres = value)  _
						= false) Then
				Me.OnAdresChanging(value)
				Me.SendPropertyChanging
				Me._Adres = value
				Me.SendPropertyChanged("Adres")
				Me.OnAdresChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OdaNo", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property OdaNo() As String
		Get
			Return Me._OdaNo
		End Get
		Set
			If (String.Equals(Me._OdaNo, value) = false) Then
				Me.OnOdaNoChanging(value)
				Me.SendPropertyChanging
				Me._OdaNo = value
				Me.SendPropertyChanged("OdaNo")
				Me.OnOdaNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="Int NOT NULL")>  _
	Public Property Value() As Integer
		Get
			Return Me._Value
		End Get
		Set
			If ((Me._Value = value)  _
						= false) Then
				Me.OnValueChanging(value)
				Me.SendPropertyChanging
				Me._Value = value
				Me.SendPropertyChanged("Value")
				Me.OnValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CheckValue", DbType:="Int NOT NULL")>  _
	Public Property CheckValue() As Integer
		Get
			Return Me._CheckValue
		End Get
		Set
			If ((Me._CheckValue = value)  _
						= false) Then
				Me.OnCheckValueChanging(value)
				Me.SendPropertyChanging
				Me._CheckValue = value
				Me.SendPropertyChanged("CheckValue")
				Me.OnCheckValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DatapointId", DbType:="SmallInt NOT NULL")>  _
	Public Property DatapointId() As Short
		Get
			Return Me._DatapointId
		End Get
		Set
			If ((Me._DatapointId = value)  _
						= false) Then
				Me.OnDatapointIdChanging(value)
				Me.SendPropertyChanging
				Me._DatapointId = value
				Me.SendPropertyChanged("DatapointId")
				Me.OnDatapointIdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
